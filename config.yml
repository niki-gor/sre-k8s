---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-cats-sql
data:
  init-cats.sql: |
    create table mytable (
        kind text primary key,
        info text
    );

    insert into mytable ( kind, info )
    values 
    ( 'siberian', 'Порода полудлинношёрстных кошек. Сибирская кошка имеет полудлинную густую шерсть' ), 
    ( 'sphynx', 'Одна из нескольких бесшерстных пород кошек' );

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-dogs-sql
data:
  init-dogs.sql: |
    create table mytable (
        kind text primary key,
        info text
    );

    insert into mytable ( kind, info )
    values 
    ( 'husky', 'Общее название для нескольких пород ездовых собак, выведенных в северных регионах' ), 
    ( 'collie', 'Группа пород пастушьих собак, происходящих из Шотландии и Северной Англии' );

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-srv
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: app.example.com
    http:
      paths:
      - pathType: Exact
        path: /
        backend:
          service:
            name: nginx-svc
            port: 
              number: 80
      - pathType: Prefix
        path: /cats
        backend:
          service:
            name: stateful-cats-svc
            port:
              number: 80
      - pathType: Prefix
        path: /dogs
        backend:
          service:
            name: stateful-dogs-svc
            port:
              number: 80

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf-file
  labels:
    app: nginx
data:
  nginx.conf: |
    server {
      listen 80;
      location / {
        add_header 'Content-Type' 'text/html';
        return 200 "Cats and Dogs Review App";
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 3
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx
          ports:
          - name: nginx-port
            containerPort: 80
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/
              readOnly: true
      volumes:
        - name: nginx-conf
          configMap:
            name: nginx-conf-file

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  selector:
    app: nginx
  ports:
  - name: http
    port: 80
    targetPort: nginx-port

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stateful-dogs-deploy
  labels:
    app: stateful-dogs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stateful-dogs
  template:
    metadata:
      labels:
        app: stateful-dogs
    spec:
      containers:
      - name: api-dogs
        image: nikigor/sre:3
        ports:
        - name: api-dogs-port
          containerPort: 8081
        env:
        - name: DSN
          value: postgresql://myuser:mypassword@stateful-dogs-svc:5432/mydb
        - name: ANIMALS
          value: dogs
        command: ["./api"]
      - name: db
        image: postgres:14-alpine
        env:
        - name: POSTGRES_USER
          value: myuser
        - name: POSTGRES_PASSWORD
          value: mypassword
        - name: POSTGRES_DB
          value: mydb
        ports:
        - name: db-dogs-port
          containerPort: 5432
        volumeMounts:
        - name: db-dogs-data
          mountPath: /var/lib/postgresql/data
        - name: db-dogs-init-sql
          mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: db-dogs-data
          emptyDir: {}
        - name: db-dogs-init-sql
          configMap:
            name: init-dogs-sql

---
apiVersion: v1
kind: Service
metadata:
  name: stateful-dogs-svc
spec:
  selector:
    app: stateful-dogs
  ports:
  - name: api-dogs-http
    port: 80
    targetPort: api-dogs-port
  - name: db-dogs-http
    port: 5432
    targetPort: db-dogs-port

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stateful-cats-deploy
  labels:
    app: stateful-cats
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stateful-cats
  template:
    metadata:
      labels:
        app: stateful-cats
    spec:
      containers:
      - name: api-cats
        image: nikigor/sre:3
        ports:
        - name: api-cats-port
          containerPort: 8081
        env:
        - name: DSN
          value: postgresql://myuser:mypassword@stateful-cats-svc:5432/mydb
        - name: ANIMALS
          value: cats
        command: ["./api"]
      - name: db
        image: postgres:14-alpine
        env:
        - name: POSTGRES_USER
          value: myuser
        - name: POSTGRES_PASSWORD
          value: mypassword
        - name: POSTGRES_DB
          value: mydb
        ports:
        - name: db-cats-port
          containerPort: 5432
        volumeMounts:
        - name: db-cats-data
          mountPath: /var/lib/postgresql/data
        - name: db-cats-init-sql
          mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: db-cats-data
          emptyDir: {}
        - name: db-cats-init-sql
          configMap:
            name: init-cats-sql

---
apiVersion: v1
kind: Service
metadata:
  name: stateful-cats-svc
spec:
  selector:
    app: stateful-cats
  ports:
  - name: api-cats-http
    port: 80
    targetPort: api-cats-port
  - name: db-cats-http
    port: 5432
    targetPort: db-cats-port

